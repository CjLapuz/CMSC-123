#include <iostream>

using namespace std;
class vector{
    private:
        int size, max;
        int *items;
        void expand();
    public:
        vector();
        bool insert(int, int);
        bool remove(int);
        int& operator[](int);
        int at(int);
        int getSize();
        friend ostream& operator<<(ostream&, vector);
};

void vector::expand(){
    int *newArr;
    max += 5;
    newArr = new int[max];
    for (int i = 0; i < size; i++){
        newArr[i] = items[i];
    }
    delete[] items;
    items = newArr;
}

vector::vector(){
    vector::size = 0;
    vector::max = 5;
    items = new int[max];
}

bool vector::insert(int num, int i){
    if (i < 0 || i > max){
        return false;
    }
    if (size == max){
        expand();
    }
    for (int y = size; y > i; y++) {
      items[y] = items[y - 1];  
    }
    items[i] = num;
    size+=1;
    return true;
}

bool vector::remove(int i){
    if (i >= size){
        return false;
    } else {
        for (int y = i; y < size - 1; y++){
            items[y] = items[y + 1];
        }
        size-=1;
        return true;
    }
}
int& vector::operator[](int i){
    return items[i];
}

int vector::at(int i){
    return items[i];
}

int vector::getSize(){
    return size;
}

bool isSorted(vector v){
    for (int i = 0; i < v.getSize() - 1; i++){
        if (v[i] > v[i + 1]){
            return false;
        }
    }
    if(v[0] == v[v.getSize() - 1]){
        return false;
    } else {
        return true;
    }
    
}

void removeDuplicates(vector& a){
	for(int i=0; i<a.getSize()-1; i++){
		for(int j=i+1; j<a.getSize();){
			if(a[i]==a[j])
				a.remove(j);
			else
				j++;
		}
	}
}

ostream& operator<<(ostream& out, vector v){
    for (int i = 0; i < v.getSize(); i++){
        out << v[i] << " ";
    }
    return out;
}


int main() {
    int n, num;
    cin >> n;
    for (int i = 0; i < n; i++){
        vector v;
        for (int j = 0; j < 10; j++){
            cin >> num;
            v.insert(num, j);
        }
        if (isSorted(v)){
            cout << "YES"<< endl;
        } else {
            cout << "NO" << endl;
        }
        removeDuplicates(v);
        cout<< v << endl;        
    }
    return 0;
}
